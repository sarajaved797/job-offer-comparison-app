# -*- coding: utf-8 -*-
"""job_offer_comparison_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXdHQsyoHKq48wDIbciXlzfjISAONz2L
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile job_offer_comparison_app.py
# 
#


import streamlit as st
import pandas as pd

# Set page config
st.set_page_config(page_title="Job Offer Comparison App", layout="wide")
st.title("📊 Job Offer Comparison Tool")

# Introduction
st.markdown("""
Compare two job offers side-by-side across important career factors to make a confident, data-driven decision.
""")

# Define comparison factors with emoji badges
factors = [
    "💰 Salary",
    "🏠 Flexibility (Remote/Onsite)",
    "🎁 Benefits (Insurance, PTO)",
    "🚚 Relocation Support",
    "💸 Bonus & Stock Options",
    "📈 Promotion Path",
    "🎓 Education Support",
    "🏢 Work Culture",
    "👀 Micromanagement",
    "📉 Employment Gap Tolerance",
    "🧭 Experience Level Fit",
    "⏳ Decision Deadline",
    "🌍 Company Brand & Industry"
]

# Step 1: Let users input details for each job offer
st.subheader("Step 1: Input the details for each job offer")

job_offer_a_details = {}
job_offer_b_details = {}

for factor in factors:
    st.markdown(f"### {factor}")
    col1, col2 = st.columns(2)

    with col1:
        job_offer_a_details[factor] = st.text_input(f"Job Offer A - {factor}", key=f"A_{factor}")

    with col2:
        job_offer_b_details[factor] = st.text_input(f"Job Offer B - {factor}", key=f"B_{factor}")

# Step 2: Rate each job offer on a scale of 1 (poor) to 5 (excellent)
st.subheader("Step 2: Rate each job offer on a scale of 1 (poor) to 5 (excellent)")

job_offer_a_scores = []
job_offer_b_scores = []

for factor in factors:
    st.markdown(f"### {factor}")
    col1, col2 = st.columns(2)
    with col1:
        score_a = st.slider(f"Job Offer A - {factor}", 1, 5, 3, key=f"A_{factor}")
        job_offer_a_scores.append(score_a)
    with col2:
        score_b = st.slider(f"Job Offer B - {factor}", 1, 5, 3, key=f"B_{factor}")
        job_offer_b_scores.append(score_b)

# Step 3: Weight factors (not all factors are equally important)
st.subheader("Step 3: Assign weights to each factor (1 is least important, 5 is most important)")

weights = []
for factor in factors:
    weight = st.slider(f"Weight for {factor}", 1, 5, 3, key=f"Weight_{factor}")
    weights.append(weight)

# Step 4: Calculate weighted scores for both job offers
st.subheader("Step 4: Results")

# Apply weights to scores
weighted_score_a = sum([score * weight for score, weight in zip(job_offer_a_scores, weights)])
weighted_score_b = sum([score * weight for score, weight in zip(job_offer_b_scores, weights)])

st.write(f"Total Weighted Score for Job Offer A: **{weighted_score_a}**")
st.write(f"Total Weighted Score for Job Offer B: **{weighted_score_b}**")

# Step 5: Show detailed comparison in table format
df = pd.DataFrame({
    "Factor": factors,
    "Job Offer A": job_offer_a_scores,
    "Job Offer B": job_offer_b_scores,
    "Weight": weights,
    "Weighted Score A": [score * weight for score, weight in zip(job_offer_a_scores, weights)],
    "Weighted Score B": [score * weight for score, weight in zip(job_offer_b_scores, weights)],
})

st.dataframe(df, use_container_width=True)

# Step 6: CSV Download
csv = df.to_csv(index=False).encode('utf-8')
st.download_button(
    label="📥 Download Comparison as CSV",
    data=csv,
    file_name='job_offer_comparison.csv',
    mime='text/csv'
)

# Add a recommendation based on weighted scores
if weighted_score_a > weighted_score_b:
    st.success("🎉 Job Offer A is the better choice based on your ratings and preferences!")
else:
    st.success("🎉 Job Offer B is the better choice based on your ratings and preferences!")

# Additional tips or information
st.info("✨ Tip: You can improve this app by adding a PDF export option or login authentication for personalized results.")
