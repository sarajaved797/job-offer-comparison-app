# -*- coding: utf-8 -*-
"""job_offer_comparison_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXdHQsyoHKq48wDIbciXlzfjISAONz2L
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile job_offer_comparison_app.py
# 
#

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(page_title="Job Offer Comparison Tool", layout="centered")

st.markdown("""
    <style>
    body {
        background-color: #f9f9fb;
    }
    .main {
        background-color: #ffffff;
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.1);
    }
    </style>
""", unsafe_allow_html=True)

st.title("üéØ Compare Your Job Offers with Clarity")
st.write("Score and compare job offers based on what matters to you most.")

factors = [
    ("Salary üí∞", 1.0),
    ("Bonus üíµ", 0.8),
    ("Remote Flexibility üè°", 0.9),
    ("401(k) & Retirement Plan üè¶", 0.7),
    ("Health Benefits üè•", 0.8),
    ("Relocation Support üöö", 0.6),
    ("Promotion Path üöÄ", 0.9),
    ("Work-Life Balance ‚öñÔ∏è", 1.0),
    ("Micromanagement Risk üëÄ", 0.7),
    ("Company Reputation üåü", 0.6),
    ("Industry & Product Relevance üß†", 0.6),
    ("Decision Deadline Pressure ‚è∞", 0.5),
    ("Gap Tolerance (for employment gap) üß©", 0.5),
    ("Education Assistance üìö", 0.4),
    ("Experience Fit (Fresher/Career Switcher) üß™", 0.4)
]

st.subheader("Assign Importance to Each Factor")
weights = {}
for factor, default_weight in factors:
    weights[factor] = st.slider(factor, 0.0, 1.0, default_weight, 0.1)

st.subheader("Input Scores for Each Offer")
st.markdown("""Rate each factor from 0 (Terrible) to 10 (Excellent) for both offers""")

data = {
    "Factor": [f[0] for f in factors],
    "Weight": [weights[f[0]] for f in factors],
    "Offer A": [],
    "Offer B": []
}

for factor, _ in factors:
    col1, col2 = st.columns(2)
    with col1:
        score_a = st.slider(f"{factor} - Offer A", 0, 10, 5)
    with col2:
        score_b = st.slider(f"{factor} - Offer B", 0, 10, 5)
    data["Offer A"].append(score_a)
    data["Offer B"].append(score_b)

# Convert to DataFrame
df = pd.DataFrame(data)
df["Weighted A"] = df["Offer A"] * df["Weight"]
df["Weighted B"] = df["Offer B"] * df["Weight"]

total_a = df["Weighted A"].sum()
total_b = df["Weighted B"].sum()

st.subheader("üìä Comparison Table")
st.dataframe(df.style.format({"Weight": "{:.1f}", "Offer A": "{:.0f}", "Offer B": "{:.0f}", "Weighted A": "{:.1f}", "Weighted B": "{:.1f}"}), use_container_width=True)

st.subheader("üèÜ Final Decision")
if total_a > total_b:
    st.success(f"‚úÖ Offer A wins with a score of {total_a:.1f} vs {total_b:.1f}")
elif total_b > total_a:
    st.success(f"‚úÖ Offer B wins with a score of {total_b:.1f} vs {total_a:.1f}")
else:
    st.info("ü§ù It's a tie! Consider negotiating both offers further.")

# Export options
st.subheader("üìÅ Export Results")
export_df = df[["Factor", "Weight", "Offer A", "Offer B", "Weighted A", "Weighted B"]]
csv = export_df.to_csv(index=False).encode('utf-8')
st.download_button("Download CSV", data=csv, file_name='job_offer_comparison.csv', mime='text/csv')